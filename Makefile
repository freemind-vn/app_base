#
# Code generated by `gkgen`
#

.PHONY: build test

# Environments
-include .env


define get_pubspec
$(shell yq -r ".$1" pubspec.yaml)
endef

#: list all targets
help:
	@grep -B1 -E "^[a-zA-Z0-9_%-]+:([^\=]|$$)" Makefile \
		| grep -v -- -- \
		| sed 'N;s/\n/###/' \
		| sed -n 's/^#: \(.*\)###\(.*\):.*/\2###\1/p' \
		| column -t -s '###'

#: remove untracked files from the working tree
clean:
#	git clean -fdx
	flutter clean

# -----------------------------------------------------------------------------
# Flutter
# -----------------------------------------------------------------------------

#: install necessary packages
init:
	dart pub global activate dartdoc
	dart pub global activate index_generator
	dart pub global activate import_sorter

#: code formatting
fmt:
	dart pub global run index_generator
	dart pub global run import_sorter:main --no-comments
	dart fix --apply
	dart format --fix lib/src/

#: analyzes the project's Dart source code
lint:
	dart analyze lib/src/

#: generate l10n from 'assets/l10n/app.xlsx'
text:
	curl -Lo assets/l10n/app.xlsx 'https://onedrive.live.com/download?cid=681330426B4177E7&resid=681330426B4177E7%21116603&authkey=AEteDTs04X0cW9U&em=2'
	dart pub global run arb_excel -a assets/l10n/app.xlsx

#: creates API reference documentation from Dart source code
doc:
	@echo "• $(shell git rev-parse --short HEAD)-$(shell git rev-parse --abbrev-ref HEAD) • $(shell date "+%Y-%m-%d %H:%M")" > doc/api/footer
	dart doc

	@sed -i 's/<title>app - Dart API docs<\/title>/<title>$(NAME)<\/title>/' doc/api/index.html
	@sed -i 's/app package/Game Dashboard/' doc/api/index.html
	@sed -i 's/>app</>Game Dashboard</' doc/api/index.html
	@sed -En 's/<span class="no-break">.*<\/span>/<span class="no-break">Game Dasboard • $(gitCommit) • $(gitBranch) <\/span>/' doc/api/index.html

#: flutter test
test:
	flutter test --coverage  --coverage-path test/lcov.info $(F_FLAGS)

#: build the package
publish:
	flutter pub publish --dry-run

# -----------------------------------------------------------------------------
# Example
# -----------------------------------------------------------------------------

#: run your Flutter app on $(PLATFORM)
run:
	cd example; make run;

#: start DevTools 
dev:
	cd example; make dev;

# -----------------------------------------------------------------------------
# OCI
# -----------------------------------------------------------------------------
#: build the image
oci:
	@$(foreach arch,$(ARCH), \
		version=$(shell echo $(VERSION) | sed -e 's/+.*//'); \
		echo "build: $(RELEASE_NAME):$${version}-$(arch)"; \
		podman build -t $(RELEASE_NAME):$${version}-$(arch) -f $(DOCKERFILE) \
			--arch $(arch) $(args) \
			--build-arg arch=$(arch) \
			--annotation org.opencontainers.image.created="$(shell date -I'seconds')" \
			--annotation org.opencontainers.image.description="$(DESCRIPTION)" \
			--annotation io.artifacthub.package.readme-url="$(README)"; \
	)

#: push an image to a specified location that defined in '.makerc'
oci-push:
ifdef REGISTRY_USER
	podman login -u $(REGISTRY_USER) -p $(REGISTRY_PWD) $(REGISTRY)
else
	podman login $(REGISTRY)
endif

	-podman manifest rm $(RELEASE_NAME):$(VERSION)
	podman manifest create $(RELEASE_NAME):$(VERSION)

	@$(foreach arch,$(ARCH), \
		echo "push: $(REGISTRY)/$(REGISTRY_REPO)/$(RELEASE_NAME):$(VERSION)-$(arch)"; \
		podman push $(RELEASE_NAME):$(VERSION)-$(arch) \
			$(REGISTRY)/$(REGISTRY_REPO)/$(RELEASE_NAME):$(VERSION)-$(arch); \
		podman manifest add $(RELEASE_NAME):$(VERSION) \
			$(REGISTRY)/$(REGISTRY_REPO)/$(RELEASE_NAME):$(VERSION)-$(arch); \
	)

	@echo "push: $(REGISTRY)/$(REGISTRY_REPO)/$(RELEASE_NAME):$(VERSION)"
	podman manifest push $(RELEASE_NAME):$(VERSION) $(REGISTRY)/$(REGISTRY_REPO)/$(RELEASE_NAME):$(VERSION)

# -----------------------------------------------------------------------------
# Helm
# -----------------------------------------------------------------------------
#: generate the Helm chart
helm:
	gkgen helm $(args)
ifneq ($(NAME),$(RELEASE_NAME))
	sed -i -e 's/name: $(NAME)/name: $(RELEASE_NAME)/' .chart/Chart.yaml
endif
	cp .config/service.k8s.yaml .chart/values.yaml
ifneq ($(wildcard .chart/Chart.lock),)
	rm .chart/Chart.lock
endif
	helm dependency build .chart/
	helm lint .chart/

#: render chart templates locally and write to '.chart/k8s.yaml'
pod: helm
	helm template $(RELEASE_NAME) .chart/ > .chart/k8s.yaml

#: upload chart to the repo that defined in '.makerc'
package: helm
	helm cm-push .chart/ $(HELM_REPO)

#: install the chart to a remote defined in '.makerc'
install:
	helm repo update && helm install $(RELEASE_NAME) $(HELM_REPO)/$(RELEASE_NAME) -n $(HELM_NAMESPACE) --version $(VERSION) $(args)

#: upgrade the release to the current version of the chart
upgrade:
	helm repo update && helm upgrade $(RELEASE_NAME) $(HELM_REPO)/$(RELEASE_NAME) -n $(HELM_NAMESPACE) --version $(VERSION) $(args)

#: restart the release
restart:
	kubectl rollout restart $(DEPLOYMENT_KIND)/$(RELEASE_NAME) -n $(HELM_NAMESPACE)

#: uninstall the release
uninstall:
	helm uninstall $(RELEASE_NAME) -n $(HELM_NAMESPACE)

#: execute the release
exec:
	kubectl exec -it $(DEPLOYMENT_KIND)/$(RELEASE_NAME) -n $(HELM_NAMESPACE) -- sh

#: print the logs for the deployment
logs:
	kubectl logs $(DEPLOYMENT_KIND)/$(RELEASE_NAME) -f -n $(HELM_NAMESPACE) --timestamps

#: stop the release
stop:
	kubectl scale --replicas=0 $(DEPLOYMENT_KIND)/$(RELEASE_NAME) -n $(HELM_NAMESPACE)
